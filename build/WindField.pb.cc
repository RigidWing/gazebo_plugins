// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WindField.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WindField.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace wind_field_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* WindField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WindField_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WindField_2eproto() {
  protobuf_AddDesc_WindField_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WindField.proto");
  GOOGLE_CHECK(file != NULL);
  WindField_descriptor_ = file->message_type(0);
  static const int WindField_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindField, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindField, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindField, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindField, velocity_),
  };
  WindField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WindField_descriptor_,
      WindField::default_instance_,
      WindField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WindField));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WindField_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WindField_descriptor_, &WindField::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WindField_2eproto() {
  delete WindField::default_instance_;
  delete WindField_reflection_;
}

void protobuf_AddDesc_WindField_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017WindField.proto\022\024wind_field_msgs.msgs\032"
    "\ntime.proto\"b\n\tWindField\022\020\n\010frame_id\030\001 \002"
    "(\t\022 \n\005stamp\030\002 \002(\0132\021.gazebo.msgs.Time\022\017\n\007"
    "azimuth\030\003 \002(\001\022\020\n\010velocity\030\004 \002(\001", 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WindField.proto", &protobuf_RegisterTypes);
  WindField::default_instance_ = new WindField();
  WindField::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WindField_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WindField_2eproto {
  StaticDescriptorInitializer_WindField_2eproto() {
    protobuf_AddDesc_WindField_2eproto();
  }
} static_descriptor_initializer_WindField_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WindField::kFrameIdFieldNumber;
const int WindField::kStampFieldNumber;
const int WindField::kAzimuthFieldNumber;
const int WindField::kVelocityFieldNumber;
#endif  // !_MSC_VER

WindField::WindField()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wind_field_msgs.msgs.WindField)
}

void WindField::InitAsDefaultInstance() {
  stamp_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
}

WindField::WindField(const WindField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:wind_field_msgs.msgs.WindField)
}

void WindField::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stamp_ = NULL;
  azimuth_ = 0;
  velocity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WindField::~WindField() {
  // @@protoc_insertion_point(destructor:wind_field_msgs.msgs.WindField)
  SharedDtor();
}

void WindField::SharedDtor() {
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frame_id_;
  }
  if (this != default_instance_) {
    delete stamp_;
  }
}

void WindField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WindField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WindField_descriptor_;
}

const WindField& WindField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WindField_2eproto();
  return *default_instance_;
}

WindField* WindField::default_instance_ = NULL;

WindField* WindField::New() const {
  return new WindField;
}

void WindField::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WindField*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(azimuth_, velocity_);
    if (has_frame_id()) {
      if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        frame_id_->clear();
      }
    }
    if (has_stamp()) {
      if (stamp_ != NULL) stamp_->::gazebo::msgs::Time::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WindField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:wind_field_msgs.msgs.WindField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string frame_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), this->frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frame_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stamp;
        break;
      }

      // required .gazebo.msgs.Time stamp = 2;
      case 2: {
        if (tag == 18) {
         parse_stamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_azimuth;
        break;
      }

      // required double azimuth = 3;
      case 3: {
        if (tag == 25) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_velocity;
        break;
      }

      // required double velocity = 4;
      case 4: {
        if (tag == 33) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wind_field_msgs.msgs.WindField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wind_field_msgs.msgs.WindField)
  return false;
#undef DO_
}

void WindField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wind_field_msgs.msgs.WindField)
  // required string frame_id = 1;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->frame_id(), output);
  }

  // required .gazebo.msgs.Time stamp = 2;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stamp(), output);
  }

  // required double azimuth = 3;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->azimuth(), output);
  }

  // required double velocity = 4;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->velocity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wind_field_msgs.msgs.WindField)
}

::google::protobuf::uint8* WindField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wind_field_msgs.msgs.WindField)
  // required string frame_id = 1;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->frame_id(), target);
  }

  // required .gazebo.msgs.Time stamp = 2;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stamp(), target);
  }

  // required double azimuth = 3;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->azimuth(), target);
  }

  // required double velocity = 4;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->velocity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wind_field_msgs.msgs.WindField)
  return target;
}

int WindField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string frame_id = 1;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_id());
    }

    // required .gazebo.msgs.Time stamp = 2;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stamp());
    }

    // required double azimuth = 3;
    if (has_azimuth()) {
      total_size += 1 + 8;
    }

    // required double velocity = 4;
    if (has_velocity()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WindField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WindField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WindField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WindField::MergeFrom(const WindField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_stamp()) {
      mutable_stamp()->::gazebo::msgs::Time::MergeFrom(from.stamp());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WindField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindField::CopyFrom(const WindField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindField::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_stamp()) {
    if (!this->stamp().IsInitialized()) return false;
  }
  return true;
}

void WindField::Swap(WindField* other) {
  if (other != this) {
    std::swap(frame_id_, other->frame_id_);
    std::swap(stamp_, other->stamp_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(velocity_, other->velocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WindField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WindField_descriptor_;
  metadata.reflection = WindField_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace wind_field_msgs

// @@protoc_insertion_point(global_scope)
