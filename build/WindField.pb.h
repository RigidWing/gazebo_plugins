// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WindField.proto

#ifndef PROTOBUF_WindField_2eproto__INCLUDED
#define PROTOBUF_WindField_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
// @@protoc_insertion_point(includes)

namespace wind_field_msgs {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WindField_2eproto();
void protobuf_AssignDesc_WindField_2eproto();
void protobuf_ShutdownFile_WindField_2eproto();

class WindField;

// ===================================================================

class WindField : public ::google::protobuf::Message {
 public:
  WindField();
  virtual ~WindField();

  WindField(const WindField& from);

  inline WindField& operator=(const WindField& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WindField& default_instance();

  void Swap(WindField* other);

  // implements Message ----------------------------------------------

  WindField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WindField& from);
  void MergeFrom(const WindField& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string frame_id = 1;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  inline const ::std::string& frame_id() const;
  inline void set_frame_id(const ::std::string& value);
  inline void set_frame_id(const char* value);
  inline void set_frame_id(const char* value, size_t size);
  inline ::std::string* mutable_frame_id();
  inline ::std::string* release_frame_id();
  inline void set_allocated_frame_id(::std::string* frame_id);

  // required .gazebo.msgs.Time stamp = 2;
  inline bool has_stamp() const;
  inline void clear_stamp();
  static const int kStampFieldNumber = 2;
  inline const ::gazebo::msgs::Time& stamp() const;
  inline ::gazebo::msgs::Time* mutable_stamp();
  inline ::gazebo::msgs::Time* release_stamp();
  inline void set_allocated_stamp(::gazebo::msgs::Time* stamp);

  // required double azimuth = 3;
  inline bool has_azimuth() const;
  inline void clear_azimuth();
  static const int kAzimuthFieldNumber = 3;
  inline double azimuth() const;
  inline void set_azimuth(double value);

  // required double velocity = 4;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  inline double velocity() const;
  inline void set_velocity(double value);

  // @@protoc_insertion_point(class_scope:wind_field_msgs.msgs.WindField)
 private:
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_stamp();
  inline void clear_has_stamp();
  inline void set_has_azimuth();
  inline void clear_has_azimuth();
  inline void set_has_velocity();
  inline void clear_has_velocity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* frame_id_;
  ::gazebo::msgs::Time* stamp_;
  double azimuth_;
  double velocity_;
  friend void  protobuf_AddDesc_WindField_2eproto();
  friend void protobuf_AssignDesc_WindField_2eproto();
  friend void protobuf_ShutdownFile_WindField_2eproto();

  void InitAsDefaultInstance();
  static WindField* default_instance_;
};
// ===================================================================


// ===================================================================

// WindField

// required string frame_id = 1;
inline bool WindField::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindField::set_has_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WindField::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WindField::clear_frame_id() {
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_->clear();
  }
  clear_has_frame_id();
}
inline const ::std::string& WindField::frame_id() const {
  // @@protoc_insertion_point(field_get:wind_field_msgs.msgs.WindField.frame_id)
  return *frame_id_;
}
inline void WindField::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(value);
  // @@protoc_insertion_point(field_set:wind_field_msgs.msgs.WindField.frame_id)
}
inline void WindField::set_frame_id(const char* value) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:wind_field_msgs.msgs.WindField.frame_id)
}
inline void WindField::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  frame_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wind_field_msgs.msgs.WindField.frame_id)
}
inline ::std::string* WindField::mutable_frame_id() {
  set_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frame_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:wind_field_msgs.msgs.WindField.frame_id)
  return frame_id_;
}
inline ::std::string* WindField::release_frame_id() {
  clear_has_frame_id();
  if (frame_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = frame_id_;
    frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WindField::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frame_id_;
  }
  if (frame_id) {
    set_has_frame_id();
    frame_id_ = frame_id;
  } else {
    clear_has_frame_id();
    frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:wind_field_msgs.msgs.WindField.frame_id)
}

// required .gazebo.msgs.Time stamp = 2;
inline bool WindField::has_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindField::set_has_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WindField::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WindField::clear_stamp() {
  if (stamp_ != NULL) stamp_->::gazebo::msgs::Time::Clear();
  clear_has_stamp();
}
inline const ::gazebo::msgs::Time& WindField::stamp() const {
  // @@protoc_insertion_point(field_get:wind_field_msgs.msgs.WindField.stamp)
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
inline ::gazebo::msgs::Time* WindField::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) stamp_ = new ::gazebo::msgs::Time;
  // @@protoc_insertion_point(field_mutable:wind_field_msgs.msgs.WindField.stamp)
  return stamp_;
}
inline ::gazebo::msgs::Time* WindField::release_stamp() {
  clear_has_stamp();
  ::gazebo::msgs::Time* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline void WindField::set_allocated_stamp(::gazebo::msgs::Time* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
  // @@protoc_insertion_point(field_set_allocated:wind_field_msgs.msgs.WindField.stamp)
}

// required double azimuth = 3;
inline bool WindField::has_azimuth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindField::set_has_azimuth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WindField::clear_has_azimuth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WindField::clear_azimuth() {
  azimuth_ = 0;
  clear_has_azimuth();
}
inline double WindField::azimuth() const {
  // @@protoc_insertion_point(field_get:wind_field_msgs.msgs.WindField.azimuth)
  return azimuth_;
}
inline void WindField::set_azimuth(double value) {
  set_has_azimuth();
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:wind_field_msgs.msgs.WindField.azimuth)
}

// required double velocity = 4;
inline bool WindField::has_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WindField::set_has_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WindField::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WindField::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline double WindField::velocity() const {
  // @@protoc_insertion_point(field_get:wind_field_msgs.msgs.WindField.velocity)
  return velocity_;
}
inline void WindField::set_velocity(double value) {
  set_has_velocity();
  velocity_ = value;
  // @@protoc_insertion_point(field_set:wind_field_msgs.msgs.WindField.velocity)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace wind_field_msgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WindField_2eproto__INCLUDED
