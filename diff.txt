diff --git a/build/CMakeFiles/gazebo_lift_drag.dir/CXX.includecache b/build/CMakeFiles/gazebo_lift_drag.dir/CXX.includecache
index e721933..fd35bdc 100644
--- a/build/CMakeFiles/gazebo_lift_drag.dir/CXX.includecache
+++ b/build/CMakeFiles/gazebo_lift_drag.dir/CXX.includecache
@@ -37,8 +37,6 @@ WindField.pb.h
 ../include/liftdrag_plugin/WindField.pb.h
 send_protobuf_msgs.hh
 ../include/liftdrag_plugin/send_protobuf_msgs.hh
-math.h
--
 
 ../include/send_protobuf_msgs.hh
 stdlib.h
diff --git a/build/CMakeFiles/gazebo_lift_drag.dir/liftdrag_plugin.cpp.o b/build/CMakeFiles/gazebo_lift_drag.dir/liftdrag_plugin.cpp.o
index 0dc343c..6ebabc4 100644
Binary files a/build/CMakeFiles/gazebo_lift_drag.dir/liftdrag_plugin.cpp.o and b/build/CMakeFiles/gazebo_lift_drag.dir/liftdrag_plugin.cpp.o differ
diff --git a/build/CMakeFiles/send_commandline_protobuf.dir/send_protobuf_msgs.cc.o b/build/CMakeFiles/send_commandline_protobuf.dir/send_protobuf_msgs.cc.o
index 1cc0907..30c28eb 100644
Binary files a/build/CMakeFiles/send_commandline_protobuf.dir/send_protobuf_msgs.cc.o and b/build/CMakeFiles/send_commandline_protobuf.dir/send_protobuf_msgs.cc.o differ
diff --git a/build/libgazebo_lift_drag.so b/build/libgazebo_lift_drag.so
index b1b075c..cd4fb4e 100755
Binary files a/build/libgazebo_lift_drag.so and b/build/libgazebo_lift_drag.so differ
diff --git a/build/send_commandline_protobuf b/build/send_commandline_protobuf
index f49802c..def2f15 100755
Binary files a/build/send_commandline_protobuf and b/build/send_commandline_protobuf differ
diff --git a/include/liftdrag_plugin/liftdrag_plugin.h b/include/liftdrag_plugin/liftdrag_plugin.h
index 126a794..11f1af2 100644
--- a/include/liftdrag_plugin/liftdrag_plugin.h
+++ b/include/liftdrag_plugin/liftdrag_plugin.h
@@ -33,8 +33,6 @@
 
 #include "send_protobuf_msgs.hh"
 
-#include <math.h>
-
 static const std::string kDefaultWindFieldSubTopic = "/wind_field";
 
 
@@ -169,17 +167,10 @@ namespace gazebo
     protected:
 	  double azimuth_wind;	// [rad/s]
 	  double vel_wind;	// [m/s]
-    double vel_wind_x;	// [m/s]
-    double vel_wind_y;	// [m/s]
-    double vel_wind_z;	// [m/s]
 
     // KITEPOWER
     /// \brief set to true to use constant Coefficient of Drag
     protected: bool useConstantDragCoefficient;
-
-    protected: bool testMsgCallbackUsed;
-
-  protected: ignition::math::Vector3d constantWind;
   };
 }
 #endif
diff --git a/include/send_protobuf_msgs.hh b/include/send_protobuf_msgs.hh
index 8c08216..bca7751 100644
--- a/include/send_protobuf_msgs.hh
+++ b/include/send_protobuf_msgs.hh
@@ -42,13 +42,13 @@ namespace gazebo{
   double new_velocity;
   // void parse_wind_field_msg(WindFieldPtr &wind_field_msg_ptr);
 
-  // void parse_wind_field_msg(WindFieldPtr &wind_field_msg_ptr)
-  // {
-  //   common::Time::MSleep(100);
-  //   printf("Inside the parse_wind_field_msg function \n");
-  //   new_velocity = wind_field_msg_ptr->velocity();
-  //   std::cout << "The new velocity is: " << new_velocity << std::endl;
-  // }
+  void parse_wind_field_msg(WindFieldPtr &wind_field_msg_ptr)
+  {
+    common::Time::MSleep(100);
+    printf("Inside the parse_wind_field_msg function \n");
+    new_velocity = wind_field_msg_ptr->velocity();
+    std::cout << "The new velocity is: " << new_velocity << std::endl;
+  }
 
 
 
diff --git a/liftdrag_plugin.cpp b/liftdrag_plugin.cpp
index c1d4f71..93bc782 100644
--- a/liftdrag_plugin.cpp
+++ b/liftdrag_plugin.cpp
@@ -213,15 +213,7 @@ void LiftDragPlugin::OnUpdate()
   ignition::math::Vector3d velI = vel;
   // FTERO (jonas) & KITEPOWER (Xander)
   // start ---
-
-  // if (testMsgCallbackUsed == 1){
-  //
-  //   std::cout << "The value for vel_wind_x is " << this->vel_wind_x << std::endl;
-  //   ignition::math::Vector3d constantWind(this->vel_wind_x,this->vel_wind_y,this->vel_wind_z);
-  // }
-  // else{
-    ignition::math::Vector3d constantWind(this->vel_wind*cos(this->azimuth_wind),this->vel_wind*sin(this->azimuth_wind),0);
-  // }
+  ignition::math::Vector3d constantWind(this->vel_wind*cos(this->azimuth_wind),this->vel_wind*sin(this->azimuth_wind),0);
   vel += constantWind;
   // end   ---
   velI.Normalize();
@@ -242,8 +234,6 @@ void LiftDragPlugin::OnUpdate()
 #endif
 
   // rotate forward and upward vectors into inertial frame
-
-  std::cout << "The Pose is " << pose << std::endl;
   ignition::math::Vector3d forwardI = pose.Rot().RotateVector(this->forward);
 
   ignition::math::Vector3d upwardI;
@@ -437,8 +427,6 @@ void LiftDragPlugin::OnUpdate()
 
   // force and torque about cg in inertial frame
   ignition::math::Vector3d force = lift + drag;
-
-  std::cout << "The force is " << force << std::endl;
   // + moment.Cross(momentArm);
 
   ignition::math::Vector3d torque = moment;
@@ -508,30 +496,10 @@ void LiftDragPlugin::WindFieldCallback(WindFieldPtr &wind_field){
 
 // Callback of the SubscriberPtr to the test_msg Topic
 void LiftDragPlugin::TestMsgCallback(TestMsgPtr &test_msg){
-
-  testMsgCallbackUsed = 1;
   printf("Inside the TestMsgCallback function \n");
-	vel_wind = sqrt(pow(test_msg->x(),2) + pow(test_msg->y(),2) + pow(test_msg->z(),2));
-
-  if( (test_msg->x() == 0) && (test_msg->y() == 0)){
-    printf("Both x and y are zero\n");
-    std::cout << "The azimuth angle is undefined" << std::endl;
-    std::cout << "but there is some registered value for azimuth which is " << azimuth_wind << std::endl;
-  }
-  else{
-    azimuth_wind = atan2 (test_msg->y(),-1*test_msg->x());// let x point in the direciton of north
-    std::cout << "The azimuth angle is " << azimuth_wind << std::endl;
-  }
-
+	//vel_wind = test_msg->x();
   std::cout << "The test message x velocity is " << test_msg->x() << std::endl;
   std::cout << "The test message y velocity is " << test_msg->y() << std::endl;
   std::cout << "The test message z velocity is " << test_msg->z() << std::endl;
-  std::cout << "The wind velocity is " << vel_wind << std::endl;
-
-  vel_wind_x = test_msg->x();
-  vel_wind_y = test_msg->y();
-  vel_wind_z = test_msg->z();
-
-
 
 }
diff --git a/rigid_wing/model.sdf b/rigid_wing/model.sdf
index 2d21aa8..7dadae4 100644
--- a/rigid_wing/model.sdf
+++ b/rigid_wing/model.sdf
@@ -106,7 +106,27 @@
 				</vertical_velocity>
 			</altimeter>
 		</sensor>
-		<!-- force sensor is in the joint -->
+		<sensor type="force_torque" name="main_force_torque">
+			<always_on>true</always_on>	
+			<topic>/force_torque_data</topic>
+			<visualize>true</visualize>
+			<update_rate>100</update_rate>
+			<frame name="force_torque_frame">
+				<pose frame="force_torque_frame">0 0 0 0 0 0</pose>				
+			</frame>
+			<force_torque>
+				<frame >child</frame>
+				<measure_direction>child_to_parent</measure_direction>
+			</force_torque>
+		</sensor>
+        <!--sensor name="tether_force_torque" type="force_torque">
+			<always_on>true</always_on>
+			<update_rate>100</update_rate>
+			<force_torque>
+			  <frame>child</frame>
+			  <measure_direction>child_to_parent</measure_direction>
+			</force_torque>
+        </sensor-->
 		<sensor type="magnetometer" name="main_magnetometer">
 			<always_on>true</always_on>	
 			<topic>/magnetometer_data</topic>
@@ -160,30 +180,9 @@
       <windGustAzimuth>3.55</windGustAzimuth>
     </plugin-->
   <joint name="fixed_to_origin" type="ball">
-	  <parent>world</parent>
+	  <parent>ground_plane</parent>
 	  <child>rigid_wing::main_wing</child>
 	  <pose>0 0 0 0 0 0</pose>  
-	  	<sensor type="force_torque" name="main_force_torque">
-			<always_on>true</always_on>	
-			<topic>/force_torque_data</topic>
-			<visualize>true</visualize>
-			<update_rate>100</update_rate>
-			<frame name="force_torque_frame">
-				<pose frame="force_torque_frame">0 0 0 0 0 0</pose>				
-			</frame>
-			<force_torque>
-				<frame >child</frame>
-				<measure_direction>child_to_parent</measure_direction>
-			</force_torque>
-		</sensor>
-        <!--sensor name="tether_force_torque" type="force_torque">
-			<always_on>true</always_on>
-			<update_rate>100</update_rate>
-			<force_torque>
-			  <frame>child</frame>
-			  <measure_direction>child_to_parent</measure_direction>
-			</force_torque>
-        </sensor-->
   </joint>
   </model>
 </sdf>
